{"/":{"title":"ü™¥ Quartz 3.","content":"\nHost your second brain and [digital garden](https://jzhao.xyz/posts/networked-thought) for free. Quartz features\n\n1. Extremely fast natural-language [[notes/search]]\n2. Customizable and hackable design based on [Hugo](https://gohugo.io/)\n3. Automatically generated backlinks, link previews, and local graph\n4. Built-in [[notes/CJK + Latex Support (ÊµãËØï) | CJK + Latex Support]] and [[notes/callouts | Admonition-style callouts]]\n5. Support for both Markdown Links and Wikilinks\n\nCheck out some of the [amazing gardens that community members](notes/showcase.md) have published with Quartz or read about [why I made Quartz](notes/philosophy.md) to begin with.\n\n## Get Started\n\u003e üìö Step 1: [Setup your own digital garden using Quartz](notes/setup.md)\n\nReturning user? Figure out how to [[notes/updating|update]] your existing Quartz garden.\n\nIf you prefer browsing the contents of this site through a list instead of a graph, you see a list of all [setup-related notes](/tags/setup).\n\n### Troubleshooting\n- üöß [Troubleshooting and FAQ](notes/troubleshooting.md)\n- üêõ [Submit an Issue](https://github.com/jackyzha0/quartz/issues)\n- üëÄ [Discord Community](https://discord.gg/cRFFHYye7t)\n\n","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/AVL-Tree":{"title":"AVL Tree","content":"","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Aggregates":{"title":"Aggregates","content":"\n#distributed-system #pattern ","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Bottle-neck":{"title":"Bottle neck","content":"","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Code-review":{"title":"Code review","content":"![[images/CFFDADEE-EB19-496B-B9A2-BF726A97E05E.jpeg]]","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Database-per-Service":{"title":"Database per Service","content":"#distributed-system #pattern ","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Design-data-intensive-application":{"title":"Design data intensive application","content":"\n#book #database\n\n[[SSTable]]\n\n[[Replication]]","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Domain-Events":{"title":"Domain Events","content":"#distributed-system #pattern ","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Dual-writes":{"title":"Dual writes","content":"\n#dual-writes\n### Resources\n- https://developers.redhat.com/articles/2021/07/30/avoiding-dual-writes-event-driven-applications#","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Event-Sourcing":{"title":"Event Sourcing","content":"\n#distributed-system #pattern ","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Fault-tolerance":{"title":"Fault tolerance","content":"","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Fix-issues":{"title":"Fix issues","content":"https://stackoverflow.com/a/60694172","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Microservices":{"title":"Microservices","content":"[[Microservices Patterns]]","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Microservices-Patterns":{"title":"Microservices Patterns","content":"\n[[Two-phase commit]]\n[[SAGA]]\n[[Transactional Outbox]]\n[[Event Sourcing]]\n[[Database per Service]]","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Parallel-Pipeline":{"title":"Parallel Pipeline","content":"","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Pessimistic-lock":{"title":"Pessimistic lock","content":"","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/PostgreSQL":{"title":"PostgreSQL","content":"\nhttps://amplitude.engineering/how-a-single-postgresql-config-change-improved-slow-query-performance-by-50x-85593b8991b0","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Reading-list":{"title":"Reading list","content":"https://danluu.com/simple-architectures/","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Red-black-tree":{"title":"Red-black tree","content":"","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Replication":{"title":"Replication","content":"\n![[/notes/images/leader-and-followers.png]]\n\n### Leader and followers\n- _leader_ ( #master or primary) - when clients want to write to database, they must send their requests to the leader, which first writes data to its local storage.\n- _followers_ (read replicas, #slaves, secondaries, hot standbys) - whenever the leader writes new data to its local storage, it also sends the data change to all of its followers as part of replication log or change stream.\n\n### Synchronous and Asynchronous Replication\n##### Synchronous\n![[images/Synchronous-replication.png]]\n\nPros:\n- the #follower is guaranteed to have an up-to-date copy of data that is consistent with the #leader\n- if the #leader suddenly fails, we can be sure that the data is still available on the follower.\n\nCons:\n- if the synchronous #follower doesn't respond, the write cannot be processed.\n- the #leader must block all and wait until the synchronous replica is available again.\n- any one node outage would cause the whole system down. In practice, if you enable #synchronous replication on a database, it usually means that one of the followers is #synchronous, and the others are #asynchronous, it is called #semi-synchronous\n\n##### Asynchronous\n![[images/Asynchronous.png]]\n- widely used even weakening durability\n\n### Setting up new Followers\n1. take a consistent snapshot of the leader's database at some point in time - if possible, without taking a lock on the entire database.\n2. Copy the snapshot to the follower node.\n3. The follower connects to the leader and requests all the data changes that have happened since the snapshot was taken.\n4. When the follower has processed the backlog of data changes since the snapshot. It can now continue to process data changes from the leader as they happen.\n\n### Handing node outages\n##### Follower failure: Catch-up recovery\nOn its local disk, each follower keeps a log of data changes it has received from the leader. If a follower crashes and is restarted, or if the network between the leader and followers is temporarily interrupted, the follower can recover quite easily:\n- from its log, it knows the last transaction that was processed before the fault occurred. Thus, the follower can connect to the leader and request all data changes that occurred during the time when the follower was disconnected.\n##### Leader failure: Failover\n","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/SAGA":{"title":"SAGA","content":"# SAGA\n![[images/SAGA.png]]\n\n### Two ways of coordination SAGA\nThere are two ways of coordination sagas:\n- Choreography - each local transaction publish domain events that trigger local transactions in other services.\n- Orchestration - an orchestrator (object) tells the participants what local transactions to execute.\n\n### Resulting context\n##### Pros\n- It enables an application to maintain data consistency across multiple services without using distributed transaction.\n- The programming model is more complex. For example, a developer must design compensating that explicitly undo changes made earlier in a saga.\n\n##### Issues to address\n- In order to be reliable, a service must atomically update its database and publish a message/event. It cannot use the traditional mechanism of a distributed transaction that spans the database and the message broker. Instead, it must use one of the patterns list below:\n\t- [[Event Sourcing]]\n\t- [[Transactional Outbox]]\nA choreography-based saga can publish events using [[Aggregates]] and [[Domain Events]]\n- A client that initiates the saga, which an asynchronous flow, using a synchronous request (e.g. HTTP `POST /orders`) needs to be able to determine its outcome. There are different options, each with different trade-off:\n\t- The service sends back a response once the saga completes, e.g. once it receives `OrderApproved` or `OrderRejected` event.\n\t- The service sends back a response (e.g. containing the `orderId`) after initiating the saga, and the client periodically #polls (e.g. `GET /orders/{orderId}`) to determine the outcome\n\t- The service sends back a response (e.g. containing the `orderId`) after initiating the saga, and then sends an event (e.g. #websocket, #webhook, etc.) to the client once the saga completes.\n\n[[SAGA pattern with Orchestrator and Choreography]]\n\n### Resources\n- https://microservices.io/patterns/data/saga.html\n- https://www.youtube.com/watch?v=cpdL73GsM5c","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/SAGA-pattern-with-Orchestrator-and-Choreography":{"title":"SAGA pattern with Orchestrator and Choreography","content":"### Orchestrator: Command based\n\n#### Pros\n- Good for complex workflow / less coupling\n- Separation of concerns\n\n#### Cons \n- [[Single point of failure]]\n- [[Bottle neck]]/Latency\n\n![[images/Orchestrator service.png]]\n### Choreography: Event based\n\u003e cho¬∑re¬∑og¬∑ra¬∑phy (Definition: The sequence of steps and movements in dance or figure skating, especially in a ballet or other staged dance.)\n![[images/Event base - Choreography.png]]\n\n#### Pros\n- No extra service / Simplicity\n- No [[Single point of failure]]\n- Loose coupling / [[Fault tolerance]]\n\n#### Cons\n- Difficult to maintain/understand\n- Risk of cyclic dependency\n\n### When to choose which?\n#### Business processing model\nIf you don't care about centralizing business process ‚Üí **Choreography**\nIf you do ‚Üí **Orchestration**\n\n#### Service coupling\n**Choreography** \u003e **Orchestrator**\n\n#### Transaction management\n","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/SSTable":{"title":"SSTable","content":"\n#database \n[[Red-black tree]]\n[[AVL Tree]]\n\nWhen a write comes in, add it to an in-memory balanced tree data structure ([[memtable]])\nWhen the [[memtable]] gets bigger than the thresh-hold, typically a few megabytes, write out it to disk as an [[SSTable]]\nThe new [[SSTable]] becomes the most recent segment of the database, while the [[SSTable]] is being written into disk, writes can continue to a new [[memtable]] instance. \n\nIn order to serve a read request, first try to find the key in the [[memtable]], the most recent on-disk segment, then in the next older segment, etc. \n\nFrom time to time, run a merging and compaction process in the background to combine segment files and to discard overwritten or deleted values. \n","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Service-Account-Token-Volume-Projection":{"title":"Service Account Token Volume Projection","content":"https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Service-to-Service-Authentication":{"title":"Service-to-Service Authentication","content":"https://medium.com/in-the-weeds/service-to-service-authentication-on-kubernetes-94dcb8216cdc\n\n![[images/Pasted image 20221004112657.png]]\n\n[[Service Account Token Volume Projection]]","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Single-point-of-failure":{"title":"Single point of failure","content":"","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Spring-Framework":{"title":"Spring Framework","content":"\n# Spring framework\n\n![[images/Spring's basic functional area.png]]\n\n### The Core Spring Container\n\n### Aspect-oriented programming (AOP)\n\n### Data Access/Integration\n\n### DI\nhttps://martinfowler.com/articles/injection.html#ConstructorVersusSetterInjection\n\n### POJO\n#pojo Plain Old Java Object\nhttps://www.geeksforgeeks.org/pojo-vs-java-beans/\n\n\n### Wiring beans using XML\n\n```java\npublic AccountService(AccountDao accountDao) {\n  this.accountDao = accountDao;\n}\n```\n\nIn Spring, you resolve the dependency like this:\n\n```xml\n\u003cbean id=\"accountService\" class=\"com.springinpractice.ch01.service.AccountService\"\u003e\n  \u003cconstructor-arg ref=\"accountDao\"/\u003e\n\u003c/bean\u003e\n```\n\n#PropertyPlaceholderConfigurer\n\n\n### Bean scopes\n- #singleton default scope for beans in Spring, \n- prototype\n- request\n- session\n- global session\n\n### JDBC\n\n","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Three-phase-commit":{"title":"Three phase commit","content":"","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Tools":{"title":"Tools","content":"Zero cost, no code checklist for pre-launch startups:\n- Typedream to build the landing page\n- Copy.ai to produce text for landing page\n- Canva to create designs\n- Figma to show mockups of your app in action\n- Loom or Vidyard to have a founder talk through the product mockups in videos\n- Pitch to create downloadable ebooks or presentations about product\n- Buffer to publish word of this new page on social media\n- tally.so to create forms to collect interested users\n- Airtable to check the early signup forms in one place\n- Mailchimp to manage mailing lists for interested early users\n- Slack to manage community of interested early users\n- Make to create tasks and workflows in backend\n- Notion to handle project management","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Transactional-Outbox":{"title":"Transactional Outbox","content":"#distributed-system #pattern \n### Transactional Outbox","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/Two-phase-commit":{"title":"Two-phase commit","content":"#transaction #ACID\n- Atomicity\n- Consistency\n- Isolation\n- Durability\n\n![[content/notes/images/all-all-nothing.png.png]]\n\n### Monolithic\n```sql\nBEGIN TRANSACTION;\n\nINSERT INTO ....;\nUPDATE ...;\nDELETE ...;\n\nCOMMIT;\n```\n\n[transaction isolation](https://viblo.asia/p/014-postgresql-transaction-isolation-OeVKB67JKkW)\n\n### Distributed system\n- #distributed-system\n\n[[Dual writes]]\n\n![[content/notes/images/micro-service.png]]\n\n\u003e What happens when user was charged but order is not created?\n\n### Distributed  Transaction\n- [[Two-phase commit]]\n- [[Three phase commit]]\n- [[SAGA pattern with Orchestrator and Choreography]]\n- [[Parallel Pipeline]]\n\n##### Crazy ideas\n- Single database\n- replicate/cluster database\n\t- #eventual-consistency \n\n### Two phase commit\n- Prepare phase\n- Commit phase\n\n![[content/notes/images/two-phase commit coordinator.png]]\n\n**Coordinator** can be an sub-module of #micro-service or separated #micro-service \n\n#### Prepare phase\n- **Payment Service**\n\t- BEGIN TRANSACTION\n\t- check the balance, if not `OK`, response `ERROR`\n\t- update blance\n\t- response `OK`\n- **Order Service**\n\t- BEGIN TRANSACTION\n\t\t- check quantity, if not enough, response `ERROR`\n\t\t- create order, update remaining quantity\n\t\t- response `OK`\n\n![[content/notes/images/prepare phase.png]]\n\nNow in each service, there is a local transaction is created and record is blocked, so overally, the global isolation is guaranteed.\n\nIf all services response with `OK`, the **Coordinator** will execute the next phase: Commit Phase. If not, the **Coordinator** will send a rollback request to all services\n\n_Coordinator has to wait all response from microservices before deciding the next action: rollback or commit, so a timeout is necessary._\n\n#### Commit phase\nAfter collecting all `OK` responses from microservices, Coordinator will send a request to commit all transactions.\n\n![[content/notes/images/Commit phase.png]]\n\nIf all local transaction are successfully committed, Coordinator could finish its work here.\n\n#### Drawback\n- **Latency**: Coordinator needs to wait replies from all microservices to decide what to do next. All transactions need to be a [[Pessimistic lock]]\n- **Coordinator** is a [[Single point of failure]], all transactions will be locked until the coordinator is back.\n- **Transaction dependency**: all local transactions will be dependent on each other, a transaction needs to wait until the last responses, `resource leak` might happen.\n- **Eventually Consistency**: there is a latency between microservices, so it isn't _really_ consistency.\n","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/content/notes/images/Asynchronous.png":{"title":"","content":"","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/content/notes/images/Synchronous-replication.png":{"title":"","content":"","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/gRPC-CLI-cheatsheet":{"title":"gRPC CLI cheatsheet","content":"\n### ls\n```\ngrpc_cli ls localhost:9090\n```\n","lastmodified":"2022-11-18T10:20:48.084266741Z","tags":null},"/notes/memtable":{"title":"memtable","content":"","lastmodified":"2022-11-18T10:20:48.096266801Z","tags":null},"/notes/notes/images/leader-and-followers.png":{"title":"","content":"","lastmodified":"2022-11-18T10:20:48.096266801Z","tags":null},"/notes/templates/post":{"title":"{{title}}","content":"","lastmodified":"2022-11-18T10:20:48.096266801Z","tags":null}}
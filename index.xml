<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>🪴 Nam's Notes. on</title><link>https://namtx.dev/obsidian/</link><description>Recent content in 🪴 Nam's Notes. on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://namtx.dev/obsidian/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://namtx.dev/obsidian/Network-timing-breakdown-phases.png/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/Network-timing-breakdown-phases.png/</guid><description/></item><item><title>Aggregates</title><link>https://namtx.dev/obsidian/notes/Aggregates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Aggregates/</guid><description>#distributed-system #pattern</description></item><item><title>AVL Tree</title><link>https://namtx.dev/obsidian/notes/AVL-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/AVL-Tree/</guid><description/></item><item><title>Bottle neck</title><link>https://namtx.dev/obsidian/notes/Bottle-neck/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Bottle-neck/</guid><description/></item><item><title>Code review</title><link>https://namtx.dev/obsidian/notes/Code-review/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Code-review/</guid><description>![[notes/images/CFFDADEE-EB19-496B-B9A2-BF726A97E05E.jpeg]]</description></item><item><title>Database per Service</title><link>https://namtx.dev/obsidian/notes/Database-per-Service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Database-per-Service/</guid><description>#distributed-system #pattern</description></item><item><title>Debezium Connectors</title><link>https://namtx.dev/obsidian/notes/Debezium-Connectors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Debezium-Connectors/</guid><description/></item><item><title>Design data intensive application</title><link>https://namtx.dev/obsidian/notes/Design-data-intensive-application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Design-data-intensive-application/</guid><description>#book #database
[[SSTable]]
[[Replication]]</description></item><item><title>Distributed Systems</title><link>https://namtx.dev/obsidian/notes/Distributed-Systems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Distributed-Systems/</guid><description>[[read-after-write]]</description></item><item><title>Domain Events</title><link>https://namtx.dev/obsidian/notes/Domain-Events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Domain-Events/</guid><description>#distributed-system #pattern</description></item><item><title>Dual writes</title><link>https://namtx.dev/obsidian/notes/Dual-writes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Dual-writes/</guid><description>#dual-writes
Resources https://developers.redhat.com/articles/2021/07/30/avoiding-dual-writes-event-driven-applications#</description></item><item><title>ECE</title><link>https://namtx.dev/obsidian/notes/ECEs-Entity-Changed-Events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/ECEs-Entity-Changed-Events/</guid><description>Production and consumption In order to produce ECEs, one need to:
Create an ECE topic following the naming convention In the producer service, leverage the ebdr-outbox library Create a connector In order to consume ECEs, one need to: Give proper permission to the AWS IAM role associated with the service which is going to consume ECEs in consumer service, leverage ebdr-consumer library</description></item><item><title>Event Sourcing</title><link>https://namtx.dev/obsidian/notes/Event-Sourcing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Event-Sourcing/</guid><description>#distributed-system #pattern</description></item><item><title>Events</title><link>https://namtx.dev/obsidian/notes/Events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Events/</guid><description>Event Types Change Data Capture Events (CDC) refers to the process of capturing changes made to a database Row level changes or schema level changes CDC Events MUST NOT be consumed by consumers (µS) outside the Bounded Context which owns the data For example: Company data is owned and served by Monolith.</description></item><item><title>Fault tolerance</title><link>https://namtx.dev/obsidian/notes/Fault-tolerance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Fault-tolerance/</guid><description/></item><item><title>Fix issues</title><link>https://namtx.dev/obsidian/notes/Fix-issues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Fix-issues/</guid><description>https://stackoverflow.com/a/60694172</description></item><item><title>gRPC</title><link>https://namtx.dev/obsidian/notes/gRPC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/gRPC/</guid><description>https://developers.google.com/protocol-buffers/docs/proto3#updating</description></item><item><title>gRPC CLI cheatsheet</title><link>https://namtx.dev/obsidian/notes/gRPC-CLI-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/gRPC-CLI-cheatsheet/</guid><description>ls 1 grpc_cli ls localhost:9090</description></item><item><title>How does HTTPS work?</title><link>https://namtx.dev/obsidian/notes/How-does-HTTPS-work/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/How-does-HTTPS-work/</guid><description>Youtube - How does HTTPS work?</description></item><item><title>Kafka</title><link>https://namtx.dev/obsidian/notes/Kafka/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Kafka/</guid><description/></item><item><title>Kafka CLI</title><link>https://namtx.dev/obsidian/notes/Kafka-CLI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Kafka-CLI/</guid><description>https://github.com/birdayz/kaf
Create a new topic 1 2 3 4 5 6 7 $ kaf topic create kafka-in-actions ✅ Created topic!</description></item><item><title>Kafka in Action Book</title><link>https://namtx.dev/obsidian/notes/Kafka-in-Action-Book/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Kafka-in-Action-Book/</guid><description>Introduction to Kafka Kafka is leading the way to move from ETL - extract, transform and load and batch workflows to near-real-time data feeds.</description></item><item><title>memtable</title><link>https://namtx.dev/obsidian/notes/memtable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/memtable/</guid><description/></item><item><title>Microservices</title><link>https://namtx.dev/obsidian/notes/Microservices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Microservices/</guid><description>[[Microservices Patterns]]</description></item><item><title>Microservices learning resources</title><link>https://namtx.dev/obsidian/notes/Microservices-learning-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Microservices-learning-resources/</guid><description>https://samnewman.io/talks/principles-of-microservices/
https://www.cloudbees.com/blog/5-ways-not-mess-microservices-production
https://martinfowler.com/bliki/IntegrationDatabase.html
https://samnewman.io/books/building_microservices/
https://martinfowler.com/bliki/StranglerFigApplication.html</description></item><item><title>Microservices Patterns</title><link>https://namtx.dev/obsidian/notes/Microservices-Patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Microservices-Patterns/</guid><description>[[Two-phase commit]]
[[SAGA]]
[[Transactional Outbox]]
[[Event Sourcing]]
[[Database per Service]]</description></item><item><title>Network timning break down phases explained</title><link>https://namtx.dev/obsidian/notes/Network-timning-break-down-phases-explained/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Network-timning-break-down-phases-explained/</guid><description>![[notes/images/Pasted image 20221231172352.png]] Here&amp;rsquo;s more information about each of the phases you may see in the Timing tab:
Queuing: The browser queues requests when:</description></item><item><title>Parallel Pipeline</title><link>https://namtx.dev/obsidian/notes/Parallel-Pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Parallel-Pipeline/</guid><description/></item><item><title>Pessimistic lock</title><link>https://namtx.dev/obsidian/notes/Pessimistic-lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Pessimistic-lock/</guid><description/></item><item><title>PostgreSQL</title><link>https://namtx.dev/obsidian/notes/PostgreSQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/PostgreSQL/</guid><description>https://amplitude.engineering/how-a-single-postgresql-config-change-improved-slow-query-performance-by-50x-85593b8991b0</description></item><item><title>PostgreSQL autovacuum launcher process</title><link>https://namtx.dev/obsidian/notes/PostgreSQL-autovacuum-launcher-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/PostgreSQL-autovacuum-launcher-process/</guid><description>“Assume that we delete a few records from a table. PostgreSQL does not immediately remove the deleted tuples from the data files.</description></item><item><title>ReactJS rendering</title><link>https://namtx.dev/obsidian/notes/ReactJS-rendering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/ReactJS-rendering/</guid><description>https://twitter.com/sophiebits/status/1228942768543686656 That React Component Right Under Your Context Provider Should Probably Use React.memo
https://github.</description></item><item><title>read-after-write</title><link>https://namtx.dev/obsidian/notes/read-after-write/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/read-after-write/</guid><description>Read-after-write consistency is the ability to view changes (read data) right after making those changes (write data). For example, if you have a user profile and you change your bio on the profile, you should see the updated bio if you refresh the page.</description></item><item><title>Reading list</title><link>https://namtx.dev/obsidian/notes/Reading-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Reading-list/</guid><description>https://danluu.com/simple-architectures/</description></item><item><title>Red-black tree</title><link>https://namtx.dev/obsidian/notes/Red-black-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Red-black-tree/</guid><description/></item><item><title>Replication</title><link>https://namtx.dev/obsidian/notes/Replication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Replication/</guid><description>![[notes/images/leader-and-followers.png]]
Leader and followers leader ( #master or primary) - when clients want to write to database, they must send their requests to the leader, which first writes data to its local storage.</description></item><item><title>SAGA</title><link>https://namtx.dev/obsidian/notes/SAGA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/SAGA/</guid><description>SAGA ![[notes/images/SAGA.png]]
Two ways of coordination SAGA There are two ways of coordination sagas:
Choreography - each local transaction publish domain events that trigger local transactions in other services.</description></item><item><title>SAGA pattern with Orchestrator and Choreography</title><link>https://namtx.dev/obsidian/notes/SAGA-pattern-with-Orchestrator-and-Choreography/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/SAGA-pattern-with-Orchestrator-and-Choreography/</guid><description>Orchestrator: Command based Pros Good for complex workflow / less coupling Separation of concerns Cons [[Single point of failure]] [[Bottle neck]] !</description></item><item><title>Service Account Token Volume Projection</title><link>https://namtx.dev/obsidian/notes/Service-Account-Token-Volume-Projection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Service-Account-Token-Volume-Projection/</guid><description>https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection</description></item><item><title>Service-to-Service Authentication</title><link>https://namtx.dev/obsidian/notes/Service-to-Service-Authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Service-to-Service-Authentication/</guid><description>https://medium.com/in-the-weeds/service-to-service-authentication-on-kubernetes-94dcb8216cdc
![[notes/images/Pasted image 20221004112657.png]]
[[Service Account Token Volume Projection]]</description></item><item><title>Setting up TailwindCSS in a Parcel project</title><link>https://namtx.dev/obsidian/notes/Setting-up-TailwindCSS-in-a-Parcel-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Setting-up-TailwindCSS-in-a-Parcel-project/</guid><description>Initialize the project 1 2 3 4 5 mkdir tailwindcss-parcel-setup-example tailwindcss-parcel-setup-example yarn add -D parcel mkdir src touch src/index.html Install TailwindCSS 1 2 yarn add -D tailwindcss postcss npx tailwindcss init Configure PostCSS 1 2 3 4 5 { &amp;#34;plugins&amp;#34;: { &amp;#34;tailwindcss&amp;#34;: {} } } Configure template paths 1 2 3 4 5 6 7 8 9 module.</description></item><item><title>Single point of failure</title><link>https://namtx.dev/obsidian/notes/Single-point-of-failure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Single-point-of-failure/</guid><description/></item><item><title>Spring Framework</title><link>https://namtx.dev/obsidian/notes/Spring-Framework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Spring-Framework/</guid><description>Spring framework ![[notes/images/Spring&amp;rsquo;s basic functional area.png]]
The Core Spring Container Aspect-oriented programming (AOP) Data Access/Integration DI https://martinfowler.com/articles/injection.html#ConstructorVersusSetterInjection
POJO #pojo Plain Old Java Object https://www.</description></item><item><title>SSTable</title><link>https://namtx.dev/obsidian/notes/SSTable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/SSTable/</guid><description>#database [[Red-black tree]] [[AVL Tree]]
When a write comes in, add it to an in-memory balanced tree data structure ([[memtable]]) When the [[memtable]] gets bigger than the thresh-hold, typically a few megabytes, write out it to disk as an [[SSTable]] The new [[SSTable]] becomes the most recent segment of the database, while the [[SSTable]] is being written into disk, writes can continue to a new [[memtable]] instance.</description></item><item><title>Three phase commit</title><link>https://namtx.dev/obsidian/notes/Three-phase-commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Three-phase-commit/</guid><description/></item><item><title>Tools</title><link>https://namtx.dev/obsidian/notes/Tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Tools/</guid><description>Zero cost, no code checklist for pre-launch startups:
Typedream to build the landing page Copy.ai to produce text for landing page Canva to create designs Figma to show mockups of your app in action Loom or Vidyard to have a founder talk through the product mockups in videos Pitch to create downloadable ebooks or presentations about product Buffer to publish word of this new page on social media tally.</description></item><item><title>Transactional Outbox</title><link>https://namtx.dev/obsidian/notes/Transactional-Outbox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Transactional-Outbox/</guid><description>#distributed-system #pattern
Transactional Outbox</description></item><item><title>Two-phase commit</title><link>https://namtx.dev/obsidian/notes/Two-phase-commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Two-phase-commit/</guid><description>#transaction #ACID
Atomicity Consistency Isolation Durability ![[notes/images/all-all-nothing.png.png]]
Monolithic 1 2 3 4 5 6 7 BEGINTRANSACTION;INSERTINTO....;UPDATE...;DELETE...;COMMIT; transaction isolation</description></item><item><title>Union Find</title><link>https://namtx.dev/obsidian/notes/Union-Find/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Union-Find/</guid><description>Given the below figure shows list of vertices and edges connected between them, how can quickly check if vertices[0] and vertices[3] are connected?</description></item><item><title>Unix Process notes</title><link>https://namtx.dev/obsidian/notes/Unix-Process-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Unix-Process-notes/</guid><description>Process ID Mỗi process đều có một unique ID, nó giống như số chứng minh nhân dân của mình vậy. Thử chạy command sau ở irb (interactive ruby), ta có process đang chạy irb có ID là 96160.</description></item><item><title>Working with Processes</title><link>https://namtx.dev/obsidian/notes/Working-with-Processes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://namtx.dev/obsidian/notes/Working-with-Processes/</guid><description>Working with Processes Primer System calls The kernel of your Unix system sits atop the hardware of your computer.
It’s the middle man for any interactions that need to happen with the hardware.</description></item></channel></rss>